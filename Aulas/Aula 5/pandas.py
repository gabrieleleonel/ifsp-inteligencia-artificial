# -*- coding: utf-8 -*-
"""Pandas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nxBkK_bMxuts6P25K3T9y3S0yua_H_Me

dataframe de datas
"""

import pandas as pd
# Criar dates dataframe com frequencia  
data = pd.date_range('1/1/2011', periods = 10, freq ='H')
data

"""intervalo de datas e mostre os recursos básicos"""

# Importar biblioteca datetime
from datetime import datetime
# Criar date e time com dataframe
data = pd.date_range('1/1/2011', periods = 10, freq ='H')
print(data)
x = datetime.now()
x.month, x.year

"""Os recursos de data e hora podem ser divididos em duas categorias. 

A primeira, momentos de um período, e a segunda, o tempo decorrido desde um determinado período. 

Esses recursos podem ser muito úteis para entender os padrões nos dados.

Divida uma determinada data em recursos -

pd.Series.dt.year 		retorna o ano da data e hora.

pd.Series.dt.month    retorna o mês da data e hora.

pd.Series.dt.day 		  retorna o dia da hora e data.

pd.Series.dt.hour 		retorna a hora da data e hora.

pd.Series.dt.minute 	retorna o minuto da data e hora.

Consulte todas as datatime propriedades em https://pandas.pydata.org/pandas-docs/stable/reference/index.html
"""

# Criar date e time com dataframe
rng = pd.DataFrame()
rng['data'] = pd.date_range('1/1/2011', periods = 72, freq ='h')
 # exibir datas no formato aa-mm-dd
rng[:5]
# Exibir
rng['ano'] = rng['data'].dt.year
rng['mes'] = rng['data'].dt.month
rng['dia'] = rng['data'].dt.day
rng['hora'] = rng['data'].dt.hour
rng['minuto'] = rng['data'].dt.minute
# Exibir as datas divididas em recursos
rng.head(10)

"""carimbo de hora é o equivalente do pandas ao Datetime do Python e é intercambiável com ele na maioria dos casos. 

Denota um momento específico. Vamos ver como criar um carimbo de data / hora.
"""

# Creating the timestamp
ts = pd.Timestamp('02-06-2018')
# Exibir timestamp
print(ts)

"""períodos representam um período de tempo. 

Pode ser um mês, dia, ano, hora etc. 

Vamos ver como criar Períodos nos Pandas
"""

# criando
pr = pd.Period('06-2018')
# exibindo
print(pr)

"""Objetos de período por si só não são muito úteis até que sejam usados como um índice em um Dataframe ou uma série. 

Um índice composto de períodos são chamadosPeriodIndex 
"""

# Criando dataframe
df = pd.DataFrame({'Cidade':['Lisboa', 'Praga', 'Macao', 'Veneza'],
                    'Evento':['Musica', 'Poesia', 'Teatro', 'Comedia'],
                    'Custo':[10000, 5000, 15000, 2000]})
# Indice usando Periodo
index_ = [pd.Period('02-2018'), pd.Period('04-2018'),
          pd.Period('06-2018'), pd.Period('10-2018')]
# Indice no dataframe
df.index = index_
# Exibindo dataframe
print(df)

"""tipo de nosso índice de dataframe, que é composto por períodos individuais."""

# Checando o tipo
print(type(df.index))

"""Use a Series.str.decode()função para decodificar as cadeias de caracteres nos dados subjacentes de um determinado objeto de série"""

sr = sr = pd.Series([b"b'Nova Iorque'", b"b'Lisboa'", b"b'Toquio'", b"b'Paris'", b"b'Munique'"])  
idx = ['Cidade 1', 'Cidade 2', 'Cidade 3', 'Cidade 4', 'Cidade 5'] 
sr.index = idx 
print(sr)

"""Agora usaremos a Series.str.decode()função para decodificar as cadeias de caracteres nos dados subjacentes do objeto de série fornecido.

Como podemos ver na saída, a Series.str.decode()função decodificou com sucesso as strings nos dados subjacentes do objeto de série fornecido
"""

result = sr.str.decode(encoding = 'UTF-8') 
print(result)

"""Use a Series.str.decode()função para decodificar as cadeias de caracteres nos dados subjacentes de um determinado objeto de série"""

sr = pd.Series([b'Jose-', b'Carlos-', b'Fulano-', b'Ciclano-', b'Beltrano-']) 
idx = ['Nome 1', 'Nome 2', 'Nome 3', 'Nome 4', 'Nome 5'] 
sr.index = idx 
print(sr)

"""Agora usaremos a Series.str.decode()função para decodificar as cadeias de caracteres nos dados subjacentes do objeto de série fornecido.

Como podemos ver na saída, a Series.str.decode()função decodificou com sucesso as strings nos dados subjacentes do objeto de série fornecido
"""

result = sr.str.decode(encoding = 'ASCII') 
print(result)