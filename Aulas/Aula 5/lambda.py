# -*- coding: utf-8 -*-
"""Lambda.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OK40d_OHB5kgzF5lyg54_MitE1Skzzqh

As funções Lambda são chamadas de funções anônimas, mas o que são elas?

Nada mais são do que funções que o usuário não precisa definir, ou seja, não vai precisar escrever a função e depois utilizá-la dentro do código.

A sintaxe da função Lambda no Python pode variar de acordo com o caso de uso. 

A grande vantagem de usar Lambda é criar um parâmetro para outra função. 

Você não precisa, por exemplo, definir uma função para depois, passá-la para o map usá-la. Basta criar e passar o Lambda adiante. 

Isso, consequentemente, já torna suas tarefas muito mais práticas, objetivas e rápidas — ainda mais para quem precisa realizar muitos cálculos diariamente. 

Ela recebe o que fica antes dos dois pontos como informação e, depois, te passa um resultado.
"""

preco = 1000
def calcular_imp(preco):
  return preco * 0.3
print(calcular_imp(preco))

"""acima uma função comum"""

x = 1000
calcular_imp2 = lambda x: x * 0.3
print(calcular_imp2(x))

"""com a função lambda"""

preco = [125, 400, 15, 37]
a = list(map(lambda x: x * 0.3,preco))
print(a)

"""Pega uma lista de informações e aplica, sobre cada um dos valores dessa lista de informações, uma função. 

Isso quer dizer que essa função vai pegar essa lista de informações e vai aplicar a função para cada elemento.

Então, sempre que for executar uma função para vários valores de uma lista, nós vamos utilizar a função map.

Essa função map precisa de duas informações para que ela funcione, a função e a lista de informações
"""

funcao_soma = lambda x, y: x + y

print(funcao_soma(1, 2))

print(funcao_soma(10, -6))

numeros = [1, 9, 20, 3, 41, 50, 0, -5]

print(numeros)

numeros1 = list(filter(lambda x: x > 5, numeros))

print(numeros1)

cores_minusculo = ['azul', 'branco', 'vermelho']

print(cores_minusculo)

cores_maiusculo = list(map(lambda x: x.upper(), cores_minusculo))

print(cores_maiusculo)

from functools import reduce

numeros = [1, 9, 20, 3, 41, 50, 0]

print(numeros)

numeros = reduce(lambda x1, x2: f'{x1} - {x2}', numeros)

print(numeros)

"""Caso queira exibir os números separados por um -, isso também pode ser feito utilizando reduce e lambda"""

exemplos = ['exemplo1', 'exemplo4',
            'exemplo2', 'exemplo33',
            'exemplo100', 'exemplo44']

print(exemplos)

exemplos = sorted(exemplos)

print(exemplos)

exemplos = sorted(exemplos, key=lambda x: int(x.replace('exemplo', '')))

print(exemplos)

"""Esse é o exemplo onde a função lambda brilha, sem dúvidas utilizá-la como o parâmetro “key” das funções ordenadores é uma forma simples e elegante de resolver esse problema"""

numeros = [0,2,3,4,5,7]
pares = []
for numero in numeros:
    if numero % 2 == 0:
      pares.append(numero)

# Exibe os números
for par in pares:
    print(par)

"""Exibindo somente números pares

Código normal
"""

numeros = [0,2,3,4,5,7]
pares = filter(lambda valor: valor % 2 == 0, numeros)

for par in pares:
    print(par)

"""Exibindo somente números pares

Código usando Lambda
"""

x = 3
if x % 2 == 0:
  print('par')
  print('oi')

"""Importãncia da identação"""